{"version":3,"sources":["helpers/urls.js","actions/actionTypes.js","helpers/utils.js","actions/posts.js","components/createPost.js","components/comment.js","components/post.js","components/postsList.js","components/friendsListItem.js","components/friendsList.js","components/home.js","actions/auth.js","actions/search.js","components/navbar.js","components/page404.js","components/login.js","components/signup.js","components/settings.js","actions/profile.js","actions/friends.js","components/user.js","components/App.js","reducers/auth.js","reducers/profile.js","reducers/friends.js","reducers/search.js","reducers/index.js","reducers/posts.js","index.js","store/index.js"],"names":["rootURL","APIUrls","pages","limit","userId","id","likeType","searchText","UPDATE_POSTS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILED","SIGNUP_START","SIGNUP_SUCCESS","SIGNUP_FAILED","AUTHENTICATE_USER","LOG_OUT","CLEAR_AUTH_STATE","EDIT_USER_SUCCESSFUL","EDIT_USER_FAILED","USER_PROFILE_SUCCESS","FETCH_USER_PROFILE","USER_PROFILE_FAILURE","FETCH_FRIENDS_SUCCESS","ADD_FRIEND","REMOVE_FRIEND","ADD_POST","ADD_COMMENT","UPDATE_POST_LIKE","FETCH_SEARCH_RESULTS_SUCCESS","getFormBody","params","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","getAuthTokenFromLocalStorage","localStorage","getItem","fetchPosts","dispatch","url","fetch","then","response","json","data","posts","console","log","type","createPost","content","auth","isloggedin","alert","method","headers","Authorization","body","post","success","createComment","postId","post_id","comment","addComment","addLike","addLikeToStore","CreatePost","props","handleChange","e","setState","target","value","handleOnChange","state","className","placeholder","onChange","this","onClick","Component","connect","Comment","user","name","likes","length","Post","handleAddComment","key","_id","handleCommentChange","handlePostLike","isPostLikedByUser","includes","to","src","alt","comments","onKeyPress","map","React","PostsList","FriendsListItem","friend","email","FriendsList","friends","to_user","Home","isLoggedin","login","password","setItem","token","errorMessage","message","error","signup","confirmPassword","confirm_password","logOutUser","clearAuthState","editUser","searchUsers","searchResultsSuccess","users","Navbar","logout","removeItem","handleSearch","results","document","activeElement","getElementById","search","Page404","Login","handleEmailChange","handlePasswordChange","handleSubmit","preventDefault","inProgress","from","location","pathname","required","disabled","Signup","handleNameChange","userName","handleConfirmPasswordChange","Settings","fieldName","val","handleSave","editMode","fetchUserProfile","userProfileSuccess","fetchUserFriends","removeFriend","User","checkIfUserIsAFriend","match","indexOf","handleAddFriendClick","a","options","responce","successMessage","friendship","catch","handleRemoveFriendClick","prevProps","prevParams","currentParams","profile","isUserAFriend","PrivateRoute","privateRouteProps","component","path","render","App","jwtDecode","authenticateUser","exact","initialDefaultAuthState","initialProfileState","defaultProfileState","initialSearchState","combineReducers","action","newPosts","updatedPosts","concat","newArr","filter","store","createStore","reducer","applyMiddleware","thunk","logger","getState","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.0b5ff2ea.chunk.js","sourcesContent":["const rootURL = 'https://codeial.codingninjas.com:8000/api/v2';\r\nexport const APIUrls = {\r\n    loginURL: () => `${rootURL}/users/login`,\r\n    signupURL : () => `${rootURL}/users/signup`,\r\n    fetchPostsURL: (pages=1,limit=25) => `${rootURL}/posts?page=${pages}&limit=${limit}`,\r\n    editProfileURL: () => `${rootURL}/users/edit`,\r\n    userProfile : (userId) => `${rootURL}/users/${userId}`,\r\n    userFriends: () => `${rootURL}/friendship/fetch_user_friends`,\r\n    addFriend : (userId) => `${rootURL}/friendship/create_friendship?user_id=${userId}`,\r\n    removeFriend : (userId) => `${rootURL}/friendship/remove_friendship?user_id=${userId}`,\r\n    createPost : () => `${rootURL}/posts/create`,\r\n    createComment: () => `${rootURL}/comments/`,\r\n    toggleLike: (id,likeType) => `${rootURL}/likes/toggle?likeable_id=${id}&likeable_type=${likeType}`,\r\n    userSearch: (searchText) => `${rootURL}/users/search?text=${searchText}`,\r\n}","export const UPDATE_POSTS = 'UPDATE_POSTS';\r\n\r\nexport const LOGIN_START = 'LOGIN_START';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\r\n\r\n\r\nexport const SIGNUP_START = 'SIGNUP_START';\r\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\nexport const SIGNUP_FAILED = 'SIGNUP_FAILED';\r\n\r\nexport const AUTHENTICATE_USER = 'AUTHENTICATE_USER';\r\n\r\nexport const LOG_OUT = 'LOG_OUT';\r\n\r\nexport const CLEAR_AUTH_STATE = 'CLEAR_AUTH_STATE';\r\n\r\nexport const EDIT_USER_SUCCESSFUL = 'EDIT_USER_SUCCESSFUL';\r\n\r\nexport const EDIT_USER_FAILED = 'EDIT_USER_FAILED';\r\n\r\nexport const USER_PROFILE_SUCCESS = 'USER_PROFILE_SUCCESS';\r\n\r\nexport const FETCH_USER_PROFILE= 'FETCH_USER_PROFILE';\r\n\r\nexport const USER_PROFILE_FAILURE= 'USER_PROFILE_FAILURE';\r\n\r\n//friends\r\nexport const FETCH_FRIENDS_SUCCESS = 'FETCH_FRIENDS_SUCCESS';\r\nexport const ADD_FRIEND = 'ADD_FRIEND';\r\nexport const REMOVE_FRIEND = 'REMOVE_FRIEND';\r\n\r\nexport const ADD_POST = 'ADD_POST';\r\nexport const ADD_COMMENT='ADD_COMMENT';\r\n\r\nexport const UPDATE_POST_LIKE ='UPDATE_POST_LIKE';\r\n\r\n//search\r\nexport const FETCH_SEARCH_RESULTS_SUCCESS = 'FETCH_SEARCH_RESULTS_SUCCESS';\r\n\r\n","export function getFormBody(params){\r\n    let formBody=[];\r\n\r\n    for (let property in params){\r\n        let encodedKey = encodeURIComponent(property);  // THIS INBUILT METHOD CONVERT EG- 'user name' to 'user%20name' etc\r\n        let encodedValue = encodeURIComponent(params[property]);\r\n\r\n        formBody.push(encodedKey+\"=\"+encodedValue);\r\n    }\r\n    return formBody.join('&');  // NOW FROM THIS WE HAVE URL ENCODED STRING LIKE SYNTAX \r\n}\r\n\r\nexport function getAuthTokenFromLocalStorage(){return localStorage.getItem('token')};","import { APIUrls } from '../helpers/urls';\r\nimport {ADD_POST, UPDATE_POSTS,ADD_COMMENT, UPDATE_POST_LIKE} from './actionTypes';\r\nimport { getAuthTokenFromLocalStorage, getFormBody } from '../helpers/utils';\r\n\r\nexport function fetchPosts(){\r\n    return (dispatch) => {\r\n        // const url = \"https://baconipsum.com/api/?callback=?\";\r\n        // const url = 'http://codeial.com:8000/api/v2/posts?page=1&limit=5'; // NOT WORKING\r\n        // const url = 'http://codeial.codingninjas.com:8000/api/v2/posts?page=1&limit=5'  // WORKING\r\n        const url = APIUrls.fetchPostsURL();\r\n        fetch(url).then((response) => {\r\n            // console.log(response); // NOT JSON OBJECT\r\n            return response.json();\r\n        }).then((data) => {\r\n            console.log(\"data \", data);\r\n            dispatch(update_posts(data.data.posts));\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function update_posts(posts){\r\n    return {\r\n        type:UPDATE_POSTS,  // INSTEAD OF TAKING IT AS STRING DIRECTLY OVER HERE , WE STORE IT IN A VARIABLE IN ACTIONTYPES AND USE THIS  VARIABLE OVER HERE, SINCE EASY TO CHANGE IN FUTURE\r\n        posts\r\n    }\r\n}\r\n\r\nexport function addPost(post){\r\n    return{\r\n        type:ADD_POST,\r\n        post\r\n    }\r\n}\r\n\r\nexport function createPost(content,auth){  // NEW POST IS STORED IN DATABASE BY API, BUT WE ARE JUST STORING IT IN DATABSE BY API , NOT FECHING ALL POSTS AGAIN BY API (SINCE FROM API WE GET RANDOM POSTS, MAY OR MAY NOT GET OUR RECENTLY CREATED POSTS), HENCE WE ABLE TO SEE OUR RECENTLY POSTED POST BY STORIG AND GETTIG FROM REDUX STORE, SINCE WE ARE STORING EVERYTHING IN STORE AFTER FETCHING THROUGH API!\r\n    if(!auth.isloggedin){\r\n        alert(\"please login first!!\");\r\n    }\r\n    return (dispatch) => {\r\n        const url =  APIUrls.createPost();\r\n\r\n        fetch(url,{\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded',\r\n                 Authorization:`Bearer ${getAuthTokenFromLocalStorage()}`,\r\n\r\n            }, \r\n            body:getFormBody({content})\r\n          })\r\n          .then((response) => response.json())\r\n          .then((data) =>  {\r\n            if(data.success){\r\n                dispatch(addPost(data.data.post));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function createComment(content,postId,auth){ \r\n    if(!auth.isloggedin){\r\n        alert(\"please login first!!\");\r\n    }\r\n        return (dispatch) => {\r\n        const url =  APIUrls.createComment();\r\n        console.log(\"action\",postId);\r\n\r\n        fetch(url,{\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded',\r\n                 Authorization:`Bearer ${getAuthTokenFromLocalStorage()}`,\r\n\r\n            }, \r\n            body:getFormBody({post_id:postId,content})  // these should we as it is in name ,i.e., in place of 'content' we can't write let say 'comment' ,i.e any other string also should not differ in case as well!       \r\n        })\r\n          .then((response) => response.json())\r\n          .then((data) =>  {\r\n            if(data.success){\r\n                console.log(\"action\");\r\n                dispatch(addComment(data.data.comment,postId));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function addComment(comment,postId){\r\n    return {\r\n        type:ADD_COMMENT,\r\n        comment, \r\n        postId, // post at wich comment is added\r\n    }\r\n}\r\n\r\nexport function addLike(id,likeType,userId,auth){  // using single api for togggling the like of post and comment both\r\n    if(!auth.isloggedin){\r\n        alert(\"please login first!!\");\r\n    }\r\n    return (dispatch) => {\r\n        const url = APIUrls.toggleLike(id,likeType);\r\n        fetch(url,{\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded',\r\n                 Authorization:`Bearer ${getAuthTokenFromLocalStorage()}`,\r\n\r\n            },      \r\n        })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            if(data.success){\r\n                dispatch(addLikeToStore(id,userId));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function addLikeToStore(postId,userId){\r\n    return{\r\n    type : UPDATE_POST_LIKE,\r\n    postId,\r\n    userId\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { createPost } from '../actions/posts';\r\nimport { connect } from 'react-redux';\r\n\r\nclass CreatePost extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            content:'',\r\n        }\r\n\r\n    }\r\n\r\n    handleChange = (e) =>{\r\n        this.setState(\r\n            {\r\n                content:e.target.value,\r\n            }\r\n        )\r\n    }\r\n\r\n    handleOnChange = () => {\r\n        // dispatch action\r\n        this.props.dispatch(createPost(this.state.content,this.props.auth));\r\n        this.setState({\r\n            content:''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"create-post\" >\r\n            <textarea className=\"add-post\" placeholder=\"Start writing a post...\" onChange={this.handleChange} value={this.state.content} ></textarea>\r\n            <div>\r\n                <button id=\"add-post-btn\" onClick={this.handleOnChange} > Add Post</button>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        auth:state.auth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CreatePost); //HERE AS NOT PASSING ANY MAPSTATETOPROPS FUNCTION, AS BYDEFAULT TO GIVES US DISPATCH ONLY , THAT THE ONLY ONE WE EEDED HERE","import React from \"react\";\r\nfunction Comment({comment}) {\r\n  return ( \r\n    <div className=\"post-comment-item\">\r\n    <div className=\"post-comment-header\">\r\n      <span className=\"post-comment-author\">{comment.user.name}</span>\r\n      <span className=\"post-comment-time\">a minute ago</span>\r\n      <span className=\"post-comment-likes\">{comment.likes.length} likes</span>\r\n    </div>\r\n\r\n    <div className=\"post-comment-content\">{comment.content} </div>\r\n  </div>\r\n   );\r\n}\r\n\r\nexport default Comment;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Comments from './comment';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { addLike, createComment } from '../actions/posts';\r\n\r\nclass Post extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n          comment:'',\r\n        }\r\n      }\r\n    \r\n      handleAddComment=(e)=>{\r\n        const {comment} = this.state;\r\n        const {post} =  this.props;\r\n    \r\n        if(e.key==='Enter'){\r\n           \r\n          this.props.dispatch(createComment(comment,post._id,this.props.auth));\r\n          this.setState({\r\n            comment:'',\r\n          })\r\n        }\r\n       \r\n        \r\n      }\r\n    \r\n      handleCommentChange = (e) =>{\r\n        this.setState({\r\n          comment:e.target.value\r\n        })\r\n      }\r\n\r\n      handlePostLike=() =>{\r\n        const {post,user} =  this.props;\r\n        this.props.dispatch(addLike(post._id,'Post',user._id,this.props.auth)) // written likeType = 'Post' , since liking a post , therefore writing this according to API docs.\r\n\r\n      }\r\n    \r\n    render() { \r\n        const{post,user}= this.props;\r\n        const {comment} = this.state;\r\n\r\n        const isPostLikedByUser = post.likes.includes(user._id); // since storing userId in likes array\r\n\r\n        return (\r\n        <div className=\"post-wrapper\" key={post._id}> \r\n            <div className=\"post-header\">\r\n              \r\n                <div className=\"post-avatar\">\r\n                <Link to={`/user/${post.user._id}`}>\r\n                  <img\r\n                    src=\"https://cdn-icons-png.flaticon.com/512/3135/3135715.png\"\r\n                    alt=\"user-pic\"\r\n                  />\r\n                  </Link>\r\n                  <div>\r\n                \r\n                  <span className=\"post-author\">{post.user.name}</span>\r\n                  <span className=\"post-time\">a minute ago</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"post-content\">{post.content}</div>\r\n\r\n              <div className=\"post-actions\">  {/* problem in the API, 1. actually on again click it is toggling the like, but visually in frontend it increases the count    2. on refresh the page, red heart go away as , since actually in backend it is storing object_id of like object created instead of user_id, therefore problem in backend! */}\r\n                <button className=\"post-like no-btn\" onClick={this.handlePostLike}>\r\n                  {isPostLikedByUser\r\n                    ?\r\n                    <img // red heart image\r\n                    src=\"https://cdn-icons-png.flaticon.com/512/833/833472.png\"\r\n                    alt=\"likes-icon\"\r\n                  />\r\n                   :\r\n                  <img // plain white heart image\r\n                    src=\"https://cdn-icons-png.flaticon.com/512/1077/1077035.png\"\r\n                    alt=\"likes-icon\"\r\n                  />\r\n                  }\r\n                  <span>{post.likes.length}</span>\r\n                </button>\r\n\r\n                <div className=\"post-comments-icon\">\r\n                  <img\r\n                    src=\"https://cdn-icons-png.flaticon.com/512/1380/1380338.png\"\r\n                    alt=\"comments-icon\"\r\n                  />\r\n                  <span>{post.comments.length}</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"post-comment-box\">\r\n                <input placeholder=\"Start typing a comment\" \r\n                onKeyPress={this.handleAddComment} \r\n                onChange={this.handleCommentChange}\r\n                value={comment} \r\n                />\r\n              </div>\r\n\r\n              <div className=\"post-comments-list\">\r\n                {post.comments.map((comment) => (\r\n                  <Comments comment={comment} key = {comment._id} postId = {post._id}/>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\n\r\nfunction mapStateToProps({auth}){\r\n  return{\r\n    user:auth.user,\r\n    auth\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Post);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CreatePost from './createPost';\r\nimport Post from './post';\r\n\r\nclass PostsList extends Component {\r\n\r\n\r\n  render() {\r\n    const { posts } = this.props;\r\n\r\n\r\n    return (\r\n\r\n      <div className=\"posts-list\">\r\n\r\n      <CreatePost/>\r\n\r\n        {posts.map((post) => (\r\n          <Post post ={post} key={post._id}/>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nPostsList.propTypes = {\r\n  posts: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default PostsList;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst FriendsListItem = (props) =>{\r\n    return (\r\n        <div>\r\n            <Link className=\"friends-item\" to={`/user/${props.friend._id}`} >\r\n            <div className=\"friends-img\" >\r\n            <img\r\n              src=\"https://cdn-icons-png.flaticon.com/512/3135/3135715.png\"\r\n              alt=\"user-pic\"\r\n            /> \r\n            </div>\r\n            <div className=\"friends-name\" > \r\n                {props.friend.email}\r\n            </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\nexport default FriendsListItem;","import React from 'react';\r\nimport FriendsListItem from './friendsListItem';\r\n\r\nconst FriendsList = (props) =>{\r\n    return (\r\n        <div className=\"friends-list\" >\r\n        <div className=\"header\" > Friends</div>\r\n\r\n        {props.friends && props.friends.length==0 && (\r\n            <div className=\"no-friends\" > No Friends Found!!</div>\r\n        )}\r\n\r\n        {props.friends && \r\n            props.friends.map((friend)=>(\r\n                <FriendsListItem friend={friend.to_user} key ={friend._id}/>\r\n            ))\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FriendsList;","import React,{Component} from \"react\";\r\nimport PostsList from './postsList'\r\nimport FriendsList from \"./friendsList\";\r\n\r\nclass Home extends Component {\r\n    render() { \r\n        return ( \r\n            <div className=\"home\" >\r\n                <PostsList posts= {this.props.posts}/>\r\n                {this.props.isLoggedin && <FriendsList friends={this.props.friends} />}\r\n\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nexport default Home;","import { APIUrls } from \"../helpers/urls\";\r\nimport { AUTHENTICATE_USER, CLEAR_AUTH_STATE, EDIT_USER_FAILED, EDIT_USER_SUCCESSFUL, LOGIN_FAILED, LOGIN_START, LOGIN_SUCCESS, LOG_OUT } from \"./actionTypes\";\r\nimport { SIGNUP_FAILED, SIGNUP_START, SIGNUP_SUCCESS } from \"./actionTypes\";\r\nimport { getFormBody } from \"../helpers/utils\";\r\nimport {getAuthTokenFromLocalStorage} from \"../helpers/utils\";\r\n\r\n\r\nexport function startLogin(){\r\n    return{\r\n        type:LOGIN_START\r\n    }\r\n}\r\n\r\nexport function loginFailed(errorMessage){\r\n    return{\r\n        type:LOGIN_FAILED,\r\n        error:errorMessage\r\n    }\r\n}\r\n\r\n\r\nexport function loginSuccess(user){\r\n    return{\r\n        type:LOGIN_SUCCESS,\r\n        user\r\n    }\r\n}\r\n\r\nexport function startSignup(){\r\n    return{\r\n        type:SIGNUP_START\r\n    }\r\n}\r\n\r\nexport function signupFailed(errorMessage){\r\n    return{\r\n        type:SIGNUP_FAILED,\r\n        error:errorMessage\r\n    }\r\n}\r\n\r\n\r\nexport function signupSuccess(user){\r\n    return{\r\n        type:SIGNUP_SUCCESS,\r\n        user\r\n    }\r\n}\r\n\r\nexport function login(email,password){\r\n    return (dispatch) =>{\r\n\r\n        dispatch(startLogin());\r\n\r\n        const url = APIUrls.loginURL();\r\n        fetch(url,{\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded'\r\n            },  //THIS API IS MADE IS SUCH A WAY THAT IT REQUIRE DATA IN URL-FORM-ENCODED FORMAT BY DEFAULT IT IS JSON\r\n            body: getFormBody({email,password})  // in utils.js file // WE NEED TO CONVERT THE URL AND PASSWORD IN URL-ENCODED-STRING LIKE :- \"/login?email=a@a.com&password=13212\"\r\n        })\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            console.log('edit user data',data);\r\n            if(data.success){\r\n                //dispatch action to save user\r\n                localStorage.setItem('token',data.data.token); // TO AVOID LOGING OUT OF USER ON PAGE REFRESH\r\n                console.log('token',data.data.token);\r\n                \r\n                dispatch(loginSuccess(data.data.user)); \r\n                return;\r\n            }\r\n            dispatch(loginFailed(data.message));\r\n        }) \r\n        ;\r\n    }\r\n}\r\n\r\n\r\nexport function signup(name,email,password,confirmPassword)\r\n{\r\n    return (dispatch) => {\r\n\r\n        dispatch(startSignup());\r\n\r\n        const url = APIUrls.signupURL();\r\n        fetch(url,{\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded'\r\n            },\r\n            body:getFormBody({email,\r\n                name,\r\n                password,\r\n                confirm_password:confirmPassword,\r\n            })\r\n\r\n        })\r\n        .then( (response) => response.json())\r\n        .then( (data) => {\r\n            console.log(data);\r\n            if(data.success){\r\n                dispatch(signupSuccess(data.data.user));\r\n                return;\r\n            }\r\n            dispatch(signupFailed(data.message));\r\n        })\r\n    }\r\n}\r\n\r\nexport function authenticateUser(user){\r\n    return{\r\n        type : AUTHENTICATE_USER,\r\n        user\r\n    }\r\n}\r\n\r\n\r\nexport function logOutUser(){\r\n    return{\r\n        type : LOG_OUT,\r\n        \r\n    }\r\n}\r\n\r\nexport function clearAuthState(){\r\n    return{\r\n        type : CLEAR_AUTH_STATE,\r\n        \r\n    }\r\n}\r\n\r\nexport function editUserFailed(error){\r\n    return{\r\n        type : EDIT_USER_FAILED,\r\n        error\r\n        \r\n    }\r\n}\r\n\r\nexport function editUserSuccessful(user){\r\n    return{\r\n        type : EDIT_USER_SUCCESSFUL,\r\n        user\r\n    }\r\n}\r\n\r\nexport function editUser(name, password,confirmPassword,userId){\r\n    return (dispatch) => {\r\n        const url = APIUrls.editProfileURL();\r\n\r\n\r\n\r\n        fetch(url,{\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded',\r\n                Authorization:`Bearer ${getAuthTokenFromLocalStorage()}`,\r\n            },\r\n            body:getFormBody({\r\n                name,\r\n                password,\r\n                confirm_password:confirmPassword,\r\n                id:userId,\r\n            })\r\n\r\n        })\r\n        .then( (response) => response.json())\r\n        .then( (data) => {\r\n            console.log(data);\r\n            if(data.success){\r\n                dispatch(editUserSuccessful(data.data.user));\r\n                \r\n            \r\n                if(data.data.token){\r\n                    localStorage.setItem('token',data.data.token);\r\n                    \r\n                }\r\n                return \r\n        }\r\n\r\n           \r\n            dispatch(editUserFailed(data.message));\r\n        })\r\n\r\n\r\n\r\n\r\n        \r\n    }\r\n}","import { FETCH_SEARCH_RESULTS_SUCCESS } from \"./actionTypes\";\r\nimport { APIUrls } from '../helpers/urls';\r\nimport { getAuthTokenFromLocalStorage } from \"../helpers/utils\";\r\n\r\nexport function searchUsers(searchText,auth){\r\n    if(!auth.isloggedin){\r\n        alert(\"please login first!!\");\r\n    }\r\n    return (dispatch) =>{\r\n    const url = APIUrls.userSearch(searchText);\r\n    fetch(url,{\r\n        headers:{\r\n            'Content-Type':'application/x-www-form-urlencoded',\r\n             Authorization:`Bearer ${getAuthTokenFromLocalStorage()}`,\r\n\r\n        },      \r\n    })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n        if(data.success){\r\n            dispatch(searchResultsSuccess(data.data.users));\r\n        }\r\n        else{\r\n            dispatch(searchResultsSuccess([]));\r\n        }\r\n    })\r\n}\r\n}\r\n\r\nexport function searchResultsSuccess(users){\r\n    return{\r\n        type:FETCH_SEARCH_RESULTS_SUCCESS,\r\n        users\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport { logOutUser } from '../actions/auth';\r\nimport { searchUsers } from '../actions/search';\r\n\r\nclass Navbar extends Component {\r\n\r\n\r\n    logout = () => {\r\n      localStorage.removeItem('token');\r\n      this.props.dispatch(logOutUser());\r\n    }\r\n    handleSearch = (e) =>{\r\n      const searchText  = e.target.value;\r\n      this.props.dispatch(searchUsers(searchText,this.props.auth));\r\n    }\r\n    render() {\r\n      const auth = this.props.auth;\r\n      const {results} = this.props;\r\n\r\n      \r\n        return (\r\n            <nav className=\"nav\">\r\n            <div className=\"left-div\">\r\n            <Link to= \"/codeial\">\r\n              <img\r\n                src=\"https://ninjasfiles.s3.amazonaws.com/0000000000003454.png\"\r\n                alt=\"logo\"\r\n              />\r\n              </Link>\r\n            </div>\r\n            <div className=\"search-container\">\r\n              <img\r\n                className=\"search-icon\"\r\n                src=\"https://cdn-icons-png.flaticon.com/512/149/149852.png\"\r\n                alt=\"search-icon\"\r\n              />\r\n              <input placeholder=\"Search\" onChange={this.handleSearch} id=\"searchBar\"/>\r\n  \r\n\r\n            { results.length > 0 && document.activeElement==document.getElementById(\"searchBar\") && (\r\n              <div className=\"search-results\">\r\n                <ul>\r\n                {results.map((user) => (\r\n                  <li className=\"search-results-row\" key = {user._id}>\r\n                  <Link to={`/user/${user._id}`} >\r\n                    <img\r\n                      src=\"https://cdn-icons-png.flaticon.com/512/3135/3135715.png\"\r\n                      alt=\"user-dp\"\r\n                    />\r\n                    <span>{user.name}</span>\r\n                    </Link>\r\n                  </li>\r\n\r\n                ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n            <div className=\"right-nav\">\r\n            {auth.isLoggedin &&\r\n              <div className=\"user\">\r\n              <Link to='/settings' >\r\n                <img\r\n                  src=\"https://cdn-icons-png.flaticon.com/512/3135/3135715.png\"\r\n                  alt=\"user-dp\"\r\n                  id=\"user-dp\"\r\n                />\r\n                </Link>\r\n                <span>{auth.user.name}</span>\r\n              </div>\r\n            }\r\n              <div className=\"nav-links\">\r\n               \r\n        <ul>\r\n        { !auth.isLoggedin &&\r\n          <li>\r\n            <Link to=\"/login\">Login</Link>\r\n          </li>\r\n        }\r\n        { auth.isLoggedin &&\r\n          <li onClick={this.logout} >\r\n            Logout \r\n          </li>\r\n        }\r\n        { !auth.isLoggedin &&\r\n          <li>\r\n            <Link to=\"/signup\">Signup</Link>\r\n          </li>\r\n        }\r\n        </ul>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return{\r\n    auth:state.auth,\r\n    results:state.search.results,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar);","import React from 'react';\r\nclass Page404 extends React.Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <h1>Page not found!</h1>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Page404;","import React from \"react\";\r\nimport { clearAuthState, login } from \"../actions/auth\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nclass Login extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            email:'',\r\n            password :''\r\n         }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.dispatch(clearAuthState());\r\n    }\r\n\r\n    handleEmailChange = (e) => {\r\n        this.setState({\r\n            email:e.target.value\r\n        })\r\n    }\r\n    handlePasswordChange = (e) => {\r\n        this.setState({\r\n            password:e.target.value\r\n        })\r\n        \r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        // submit this data to server , then from server recieve success or failure and JWT Token\r\n        const {email,password} = this.state;\r\n        if(email && password){\r\n            this.props.dispatch(login(email,password));  // TO GET ACCESS OF DISPATCH HERE, WE NEED TO CONNECT THIS COMPONET WITH STORE\r\n        }\r\n    }\r\n   \r\n    render() { \r\n        const {error,inProgress,isLoggedin} = this.props.auth;\r\n        const {from}  = this.props.location.state || { from : {pathname: '/codeial'}} // i.e. IF PROPS.LOCATION.STATE IS NULL THEN REDIRECT TO HOME ONLY!!\r\n        if(isLoggedin){\r\n            // this.props.auth.isLoggedin=true;\r\n            return <Redirect to={from} />\r\n        }\r\n        return ( <div>\r\n            <form className=\"login-form\">\r\n                <span className=\"login-signup-header\" >Log in</span>\r\n                {error && <div className=\"alert error-dailog\">{error}</div>}\r\n                <div className=\"field\" >\r\n                    <input type=\"email\" placeholder=\"Email\" required onChange={this.handleEmailChange} value = {this.state.email}/> \r\n                </div>\r\n                <div className=\"field\" >\r\n                    <input type=\"password\" placeholder=\"Password\" required onChange={this.handlePasswordChange}  value = {this.state.password}/> \r\n                </div>\r\n                <div className=\"field\" >\r\n                {\r\n                    inProgress ? \r\n                    <button onClick={this.handleSubmit} disabled={inProgress} >Logging in...</button>\r\n                    :\r\n                    <button onClick={this.handleSubmit} disabled={inProgress} >Log in</button>\r\n                }\r\n                    \r\n                </div>\r\n            </form>\r\n        </div> );\r\n    }\r\n}\r\n \r\nfunction mapStateToProps(state){\r\n    return {\r\n        auth:state.auth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Login);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { signup } from \"../actions/auth\";\r\nimport { clearAuthState } from \"../actions/auth\";\r\nimport { Redirect } from \"react-router-dom\";\r\nclass Signup extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            userName:'',\r\n            email:'',\r\n            password:'',\r\n            confirmPassword:''\r\n     }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.dispatch(clearAuthState());\r\n    }\r\n     handleNameChange = (e) => {\r\n         this.setState({\r\n            userName:e.target.value\r\n         })\r\n     }\r\n\r\n     handleEmailChange = (e) =>{\r\n         this.setState({\r\n             email:e.target.value\r\n         })\r\n     }\r\n\r\n\r\n     handlePasswordChange = (e) =>{\r\n        this.setState({\r\n            password:e.target.value\r\n        })\r\n    }\r\n\r\n\r\n     handleConfirmPasswordChange = (e) =>{\r\n        this.setState({\r\n            confirmPassword : e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        const {userName, email, password,confirmPassword} = this.state;\r\n        if(email && password && confirmPassword && userName)\r\n        this.props.dispatch(signup(userName,email,password,confirmPassword))\r\n    }\r\n\r\n    render() { \r\n        const {error,inProgress,isLoggedin} = this.props.auth;\r\n        if(isLoggedin){\r\n            return <Redirect to=\"/codeial\" />\r\n        }\r\n        return ( <div>\r\n            <form className=\"login-form\">\r\n                <span className=\"login-signup-header\" >Sign Up</span>\r\n                {error && <div className=\"alert error-dailog\">{error}</div>}\r\n                <div className=\"field\" >\r\n                    <input type=\"text\" onChange={this.handleNameChange} placeholder=\"Name\" required />\r\n                </div>\r\n                <div className=\"field\" >\r\n                    <input type=\"email\" onChange={this.handleEmailChange} placeholder=\"Email\" required />\r\n                </div>\r\n                <div className=\"field\" >\r\n                    <input type=\"password\" onChange={this.handlePasswordChange} placeholder=\"Password\" required /> \r\n                </div>\r\n                <div className=\"field\" >\r\n                    <input type=\"password\" onChange={this.handleConfirmPasswordChange} placeholder=\"Confirm Password\" required /> \r\n                </div>\r\n                <div className=\"field\" >\r\n                {\r\n                    inProgress ? \r\n                    <button onClick={this.handleSubmit} disabled={inProgress} >Signing In...</button>\r\n                    :\r\n                    <button onClick={this.handleSubmit} disabled={inProgress} >Sign Up</button>\r\n                }\r\n                </div>\r\n            </form>\r\n        </div> );\r\n    }\r\n}\r\n \r\nfunction mapStateToProps (state){\r\n    return{\r\n        auth:state.auth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Signup);","import React, { useReducer } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { clearAuthState, editUser } from \"../actions/auth\";\r\nclass Settings extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:props.auth.user.name,\r\n            password:'',\r\n            confirmPassword:'',\r\n            editMode:false\r\n        }\r\n    }\r\n\r\n    handleChange = (fieldName,val) => {\r\n        this.setState({\r\n        [fieldName]:val  //HERE IS REMOVE [] THEN THE fieldName WE GETTING AS ARGUMENT IS NOT ACCESSIBLE!       \r\n\r\n        });\r\n    }\r\n\r\n    handleSave = () => {\r\n        const {password, confirmPassword,name} = this.state;\r\n        const {user} =  this.props.auth;\r\n\r\n        this.props.dispatch(editUser(name,password,confirmPassword,user._id));\r\n\r\n    }\r\n\r\n    render() { \r\n\r\n        const {user,error} = this.props.auth;\r\n        const {editMode} = this.state;\r\n        return( \r\n            <div className=\"settings\" >\r\n                <div className=\"img-container\" >\r\n                <img\r\n                  src=\"https://cdn-icons-png.flaticon.com/512/3135/3135715.png\"\r\n                  alt=\"user-dp\"\r\n                />\r\n                </div>\r\n\r\n                {error && <div className=\"alert error-dailog\" >{error}</div>}\r\n                {error===false && (<div className=\"alert success-dailog\" >Successfully updated profile</div>)}\r\n                \r\n                <div className=\"field\" >\r\n                    <div className=\"field-label\" > Email </div>\r\n                    <div className=\"field-value\" >{user.email}</div>\r\n                </div>\r\n\r\n                <div className=\"field\" >\r\n                    <div className=\"field-label\" > Name </div>\r\n                    {\r\n                        editMode ?\r\n                        <input type=\"text\" onChange={ (e) => this.handleChange('name',e.target.value)} value={this.state.name} />\r\n                        :\r\n                        <div className=\"field-value\" >{user.name}</div>\r\n                    }\r\n                </div>\r\n\r\n                { editMode && \r\n                <div className=\"field\" > \r\n                    <div className=\"filed-label\" >\r\n                    New Password\r\n                    </div>\r\n                    <input \r\n                    type=\"password\"\r\n                    onChange={ (e) => this.handleChange('password',e.target.value)}\r\n                    value={this.state.password} />\r\n                </div>}\r\n\r\n                { editMode && \r\n                <div className=\"field\" > \r\n                    <div className=\"filed-label\" >\r\n                    Confirm Password\r\n                    </div>\r\n                    <input \r\n                    type=\"password\"\r\n                    onChange={ (e) => this.handleChange('confirmPassword',e.target.value)}\r\n                    value={this.state.confirmPassword} />\r\n                </div>}\r\n                \r\n                <div className=\"btn-grp\" >\r\n                    { editMode ? \r\n                    <button className=\"button save-btn\" onClick={this.handleSave} >Save</button>\r\n                    :\r\n                    <button className=\"button edit-btn\" onClick= { () => this.handleChange('editMode',true)} >Edit Profile</button>\r\n                    }\r\n                    {editMode &&   <button onClick={ () => this.handleChange('editMode',false)} className=\"go-back\" >Go Back</button>}\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\ncomponentWillUnmount(){\r\n    this.props.dispatch(clearAuthState());\r\n}\r\n\r\n}\r\n \r\nfunction mapStateToProps(state){\r\n    return {\r\n        auth:state.auth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Settings);","import { FETCH_USER_PROFILE, USER_PROFILE_SUCCESS,USER_PROFILE_FAILURE } from \"./actionTypes\";\r\nimport { APIUrls } from \"../helpers/urls\";\r\nimport {getAuthTokenFromLocalStorage} from '../helpers/utils';\r\n\r\nexport function userProfileSuccess (user){\r\n    return {\r\n        type:USER_PROFILE_SUCCESS,\r\n        user\r\n    }\r\n}\r\nexport function userProfileFailed (user){\r\n    return {\r\n        type:USER_PROFILE_FAILURE,\r\n        user\r\n    }\r\n}\r\nexport function startUserProfileFetch (user){\r\n    return {\r\n        type:FETCH_USER_PROFILE ,\r\n        user\r\n    }\r\n}\r\n\r\nexport function fetchUserProfile(userId){\r\n    return (dispatch) => {\r\n        dispatch(startUserProfileFetch());\r\n\r\n        const url =  APIUrls.userProfile(userId);\r\n\r\n        fetch(url,{\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded',\r\n                 Authorization:`Bearer ${getAuthTokenFromLocalStorage()}`,\r\n\r\n            }, \r\n          })\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            dispatch(userProfileSuccess(data.data.user));\r\n            // also handle failure part\r\n        }) \r\n        ;\r\n\r\n    }\r\n}\r\n","import {APIUrls} from '../helpers/urls';\r\nimport { FETCH_FRIENDS_SUCCESS , ADD_FRIEND, REMOVE_FRIEND} from './actionTypes';\r\nimport { getAuthTokenFromLocalStorage } from '../helpers/utils';\r\nexport function fetchFriendsSuccess(friends){\r\n    return {\r\n        type:FETCH_FRIENDS_SUCCESS,\r\n        friends\r\n    }\r\n}\r\n\r\n\r\nexport function fetchUserFriends(userId){\r\n    return (dispatch) => {\r\n\r\n        const url =  APIUrls.userFriends();\r\n\r\n        fetch(url,{\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded',\r\n                 Authorization:`Bearer ${getAuthTokenFromLocalStorage()}`,\r\n\r\n            }, \r\n          })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            dispatch(fetchFriendsSuccess(data.data.friends));\r\n        }) \r\n        ;\r\n}\r\n}\r\n\r\nexport function addFriend(friend){\r\n    return{\r\n        type:ADD_FRIEND,\r\n        friend\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function removeFriend(userId){\r\n    return{\r\n        type:REMOVE_FRIEND,\r\n        userId\r\n    }\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchUserProfile } from \"../actions/profile\";\r\nimport { APIUrls } from \"../helpers/urls\";\r\nimport { getAuthTokenFromLocalStorage } from \"../helpers/utils\";\r\nimport {addFriend, removeFriend} from '../actions/friends'\r\nclass User extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            success:null,\r\n            error:null,\r\n            successMessage:null,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        const {match} = this.props;\r\n        if(match.params.userId){\r\n            // dispatch an action\r\n            this.props.dispatch(fetchUserProfile(match.params.userId));\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    //when searching a user and cicking on it to move to his profile, first\r\n    //time we go to the profile but now if search another user, then url is \r\n    //changing but the content on screen is shown of previous user only even \r\n    //after clikcing on new user. since url is changing means component is \r\n    //changing but not updated on screen, so in such cases we use componentDidUpdate()\r\n    // method, like this :-\r\n    componentDidUpdate(prevProps) {\r\n        const {\r\n            match: {params:prevParams}  // renaming params to prevParams and using destructing side by side\r\n        } = prevProps;\r\n\r\n        const {\r\n            match:{params:currentParams}\r\n        } = this.props;\r\n\r\n        if(prevParams && currentParams && prevParams.userId !== currentParams.userId){\r\n            this.props.dispatch(fetchUserProfile(currentParams.userId));\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    checkIfUserIsAFriend = () => {\r\n        const {match,friends} = this.props;\r\n        const userId=match.params.userId;\r\n\r\n        const index = friends.map(friend => friend.to_user._id).indexOf(userId);\r\n\r\n        if(index!==-1){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    handleAddFriendClick = async () => {  // MUST WRITE async KEYWORD WHEN USING await IN THE FUNCTION\r\n        // ANOTHER MEYHOD OF MAKING ASYNC API CALLS WITHOUT USING .then() BY USING async AND  await KEYWORDS!\r\n        const userId = this.props.match.params.userId;\r\n        const url =APIUrls.addFriend(userId);\r\n\r\n        const options = {\r\n            method:'POST',\r\n            // mode:\"no-cors\",\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded',\r\n                Authorization:`Bearer ${getAuthTokenFromLocalStorage()}`,\r\n            }\r\n        }\r\n\r\n        fetch(url,options)\r\n        .then( (responce) =>{responce.json()})\r\n        .then((data) =>{\r\n            if(data.success){\r\n                this.setState({\r\n                    success:true,\r\n                    successMessage:\"Added Friend Successfully!\"\r\n            \r\n                })\r\n                this.props.dispatch(addFriend(data.data.friendship));\r\n            }\r\n            else{\r\n                this.setState({\r\n                    success:null,\r\n                    error:data.message,\r\n                })\r\n            }\r\n        }\r\n        )\r\n        .catch(\r\n            (error) =>{ console.log(error);}\r\n        ); // await WILL WAIT FOR THE FETCH TO COMPLETE\r\n       \r\n       \r\n        // const data = await responce.json();\r\n\r\n        // if(data.success){\r\n        //     this.setState({\r\n        //         success:true,\r\n        //         successMessage:\"Added Friend Successfully!\"\r\n        \r\n        //     })\r\n        //     this.props.dispatch(addFriend(data.data.friendship));\r\n        // }\r\n        // else{\r\n        //     this.setState({\r\n        //         success:null,\r\n        //         error:data.message,\r\n        //     })\r\n        // }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    handleRemoveFriendClick = async () => {  // MUST WRITE async KEYWORD WHEN USING await IN THE FUNCTION\r\n        // ANOTHER MEYHOD OF MAKING ASYNC API CALLS WITHOUT USING .then() BY USING async AND  await KEYWORDS!\r\n        const userId = this.props.match.params.userId;\r\n        const url =APIUrls.removeFriend(userId);\r\n\r\n        const options = {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/x-www-form-urlencoded',\r\n                Authorization:`Bearer ${getAuthTokenFromLocalStorage()}`,\r\n            }\r\n        }\r\n\r\n        const responce = await fetch(url,options); // await WILL WAIT FOR THE FETCH TO COMPLETE\r\n        const data = await responce.json();\r\n\r\n        if(data.success){\r\n            this.setState({\r\n                success:true,\r\n                successMessage:\"Removed Friend Successfully!\"\r\n        \r\n            })\r\n            this.props.dispatch(removeFriend(userId));\r\n        }\r\n        else{\r\n            this.setState({\r\n                success:null,\r\n                error:data.message,\r\n            })\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    render() { \r\n\r\n\r\n        console.log(this.props);\r\n        const {\r\n            match:{params},\r\n            profile,\r\n        } = this.props;\r\n        const user = profile.user;\r\n        console.log(\"params\",params);\r\n\r\n        if(profile.inProgress){\r\n            return <h1>Loading!!</h1>;\r\n        }\r\n\r\n        const isUserAFriend= this.checkIfUserIsAFriend();\r\n        const {success,error,successMessage} = this.state;\r\n        return (\r\n            <div className=\"settings\" >\r\n\r\n            <div className=\"img-container\" >\r\n            <img\r\n              src=\"https://cdn-icons-png.flaticon.com/512/3135/3135715.png\"\r\n              alt=\"user-dp\"\r\n            />\r\n            </div>\r\n            <div className=\"field\" >\r\n                    <div className=\"field-label\" > Name </div>\r\n                    <div className=\"field-value\" >{user.name}</div>\r\n            </div>\r\n            <div className=\"field\" >\r\n                    <div className=\"field-label\" > Email </div>\r\n                    <div className=\"field-value\" >{user.email}</div>\r\n            </div>\r\n            <div className=\"btn-grp\">\r\n            {isUserAFriend ? \r\n                <button className=\"button save-btn\" onClick={this.handleRemoveFriendClick} >Remove Friend</button>\r\n                :\r\n                <button className=\"button save-btn\" onClick={this.handleAddFriendClick} >Add Friend</button>\r\n\r\n            }\r\n\r\n            {success && <div className=\"alert success-dailog\" >{successMessage}</div>}\r\n            {error && <div className=\"alert error-dailog\" >{error}</div>}\r\n\r\n            </div>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n \r\nfunction mapStatetoProps({profile,friends}){\r\n    return {\r\n        profile,\r\n        friends,\r\n    }\r\n}\r\nexport default connect(mapStatetoProps)(User);","\n\n// installed --> npm i redux react-redux redux-thunk redux-logger\n\nimport React from \"react\";\nimport {connect} from 'react-redux';\nimport {BrowserRouter as Router,Route, Switch} from 'react-router-dom';\n// import posts from \"../reducers/posts\";\nimport {fetchPosts} from '../actions/posts';\nimport Home from \"./home\";\nimport Navbar from './navbar';\nimport Page404 from \"./page404\";\nimport Login from \"./login\";\nimport Signup from \"./signup\";\nimport jwtDecode from 'jwt-decode';\nimport { authenticateUser } from \"../actions/auth\";\nimport Settings from \"./settings\";\nimport User from \"./user\";\nimport { Redirect } from \"react-router\";\nimport { getAuthTokenFromLocalStorage } from \"../helpers/utils\";\nimport { fetchUserFriends } from \"../actions/friends\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//      App\n//     </div>\n//   );\n// }\n\nconst PrivateRoute = (privateRouteProps) =>{  // MAKE A SEPARTE COMPONENT , FOR REUASABLITY OF THIS PRIVATE ROUTE\n  const {isLoggedin,component:Component,path} = privateRouteProps;\n  return(\n    <Route\n      path={path}\n      render={(props) =>{\n        return isLoggedin ? <Component {...props}/> : <Redirect to={{\n          pathname:'/login',\n          state:{\n          from : props.location\n          }\n        }} />\n      }}\n    />\n  )\n}\n\nclass App extends React.Component{\n\n  componentDidMount(){\n    this.props.dispatch(fetchPosts());\n\n    const token = getAuthTokenFromLocalStorage();\n    if(token){\n      // NOW NEED TO DECRYPT TEKEN \n      const user = jwtDecode(token);\n      console.log('jwtUser',user);\n      this.props.dispatch(authenticateUser({\n        email:user.email,\n        _id:user._id,\n        name:user.name\n      }));\n      this.props.dispatch(fetchUserFriends());\n    }\n\n  }\n\n  render(){\n    console.log(\"in app.js\",this.props.posts);\n    return(\n      <Router>\n      <div>\n        <Navbar/>\n        {/* <PostsList posts={this.props.posts} /> */}\n\n\n      <Switch>\n        <Route path=\"/codeial\" exact render={(props) => {  // USE THIS WHEN TO USE LOGIC IN ROUTING\n          return <Home {...props} posts = {this.props.posts} friends={this.props.friends}  isLoggedin={this.props.auth.isLoggedin} />\n        }} />\n        <Route path=\"/login\"  component={Login} />\n        <Route path=\"/signup\"  component={Signup} />\n        <PrivateRoute path=\"/settings\"  component={Settings} isLoggedin={this.props.auth.isLoggedin} />\n        <PrivateRoute path=\"/user/:userId\"  component={User} isLoggedin={this.props.auth.isLoggedin} />\n        <Route component={Page404} />\n        </Switch>\n      </div>\n      </Router>\n    )\n  }\n}\n\n\nfunction mapStateToProps (state){  // WE AUTOMATICALLY GETS STATE AS ARGUMENT HERE, TO USE THIS STATE TO STORE DATA FROM THIS STATE/REDUX-STORE TO PROPS\n     return {\n    posts:state.posts,\n    auth:state.auth,\n    friends:state.friends\n  }  \n}\n\nexport default connect(mapStateToProps)(App); // CONNECT HAS NESTED FUNCTION FIRST OUTER FUNCTION TAKE mapStateToProps AS PARAMETER AND 2ND INNNER FUNCTION TAKEE App AS PARAMETER\n","import { LOGIN_FAILED,LOGIN_SUCCESS, LOGIN_START,SIGNUP_FAILED,SIGNUP_SUCCESS, SIGNUP_START, AUTHENTICATE_USER, LOG_OUT, CLEAR_AUTH_STATE, EDIT_USER_FAILED, EDIT_USER_SUCCESSFUL } from \"../actions/actionTypes\"\r\nconst initialDefaultAuthState={\r\n    user:{},\r\n    isLoggedin:false,\r\n    isloggedin:false,\r\n    inProgress:false,\r\n    error:null\r\n}\r\nexport default function(state=initialDefaultAuthState,action){\r\n    switch(action.type){\r\n        case LOGIN_SUCCESS:\r\n        case SIGNUP_SUCCESS:\r\n            return{\r\n                ...state,\r\n                isLoggedin:true,\r\n                isloggedin:true,\r\n                inProgress:false,\r\n                user:action.user,\r\n                error:null\r\n\r\n            }\r\n        case LOGIN_FAILED:\r\n        case SIGNUP_FAILED:\r\n        return{\r\n            ...state,\r\n            inProgress:false,\r\n            error:action.error\r\n\r\n        }\r\n        case LOGIN_START:\r\n        case SIGNUP_START:\r\n        return{\r\n            ...state,\r\n            inProgress:true,\r\n\r\n        }\r\n        case AUTHENTICATE_USER:\r\n            return{\r\n                ...state,\r\n                user:action.user,\r\n                isLoggedin:true,\r\n                isloggedin:true,\r\n            }\r\n        case LOG_OUT:\r\n            return{\r\n                ...state,\r\n                user:{},\r\n                isLoggedin:false,\r\n                isloggedin:false,\r\n            }\r\n        case CLEAR_AUTH_STATE:\r\n        return{\r\n            ...state,\r\n            error:null\r\n        }\r\n        case EDIT_USER_FAILED:\r\n        return{\r\n            ...state,\r\n            error:action.error,\r\n        }\r\n        case EDIT_USER_SUCCESSFUL:\r\n        return{\r\n            ...state,\r\n            user:action.user,\r\n            error:false  //to use futher in showing error etc on screen, therefore asign false instaed of null \r\n        }\r\n        default:\r\n            return{\r\n                ...state\r\n            }\r\n    }\r\n}","import { FETCH_USER_PROFILE, USER_PROFILE_FAILURE, USER_PROFILE_SUCCESS } from \"../actions/actionTypes\";\r\n\r\nconst initialProfileState={\r\n    user:{},\r\n    error:null,\r\n    success:null,\r\n    inProgress:false,\r\n\r\n}\r\n\r\n\r\nexport default function profile(state=initialProfileState,action){  // good to give initial default state as if in case state passes undefined type then our program not throw error and consider default state\r\n    switch(action.type){\r\n    case USER_PROFILE_SUCCESS:\r\n        return {\r\n            ...state,\r\n            user:action.user,\r\n            inProgress:false,\r\n            error:null,\r\n            success:true\r\n        }; // THIS WILL BE NOW NEW STATE\r\n    \r\n    case USER_PROFILE_FAILURE:\r\n        return {\r\n            ...state,\r\n            inProgress:false,\r\n            error:action.error,\r\n        };\r\n\r\n    case FETCH_USER_PROFILE:\r\n        return {\r\n            ...state,\r\n            inProgress:true,\r\n        };\r\n\r\n    default:\r\n        return state;\r\n    }\r\n}\r\n","import { ADD_FRIEND, FETCH_FRIENDS_SUCCESS, REMOVE_FRIEND } from \"../actions/actionTypes\";\r\n\r\nconst defaultProfileState=[];\r\n\r\nexport default function friends(state=defaultProfileState,action){\r\n    switch(action.type){\r\n        case FETCH_FRIENDS_SUCCESS:\r\n            return [...action.friends]\r\n        case ADD_FRIEND:\r\n            return state.concat(action.friend)\r\n        case REMOVE_FRIEND:\r\n            const newArr = state.filter(\r\n                (friend) => friend.to_user._id !== action.userId\r\n            )\r\n            return newArr;\r\n        default:\r\n            return state\r\n    }\r\n} \r\n\r\n","import { FETCH_SEARCH_RESULTS_SUCCESS } from \"../actions/actionTypes\"\r\n\r\nconst initialSearchState ={\r\n    results:[],\r\n}\r\nexport default function search(state=initialSearchState,action){\r\n    switch(action.type){\r\n        case FETCH_SEARCH_RESULTS_SUCCESS:\r\n            return{\r\n                ...state,\r\n                results:action.users\r\n            }\r\n        default:\r\n            return{\r\n                ...state,\r\n            }\r\n    }\r\n\r\n}","import { combineReducers } from \"redux\";\r\nimport posts from './posts';\r\nimport auth from './auth';\r\nimport profile from './profile';\r\nimport friends from './friends';\r\nimport search from \"./search\";\r\n\r\nexport default combineReducers({\r\n    posts,\r\n    auth,\r\n    profile,\r\n    friends,\r\n    search\r\n})","import { ADD_COMMENT, ADD_POST, UPDATE_POST_LIKE } from \"../actions/actionTypes\";\r\nimport { UPDATE_POSTS } from \"../actions/actionTypes\";\r\n\r\nexport default function posts(state=[],action){  // good to give initial default state as if in case state passes undefined type then our program not throw error and consider default state\r\n    switch(action.type){\r\n    case UPDATE_POSTS:\r\n        return action.posts; // THIS WILL BE NOW NEW STATE\r\n    case  ADD_POST:\r\n        return [action.post,...state];\r\n    case ADD_COMMENT:\r\n        const newPosts = state.map((post) =>{\r\n            if(post._id===action.postId){\r\n                return {\r\n                    ...post,\r\n                    comments:[action.comment,...post.comments]\r\n                }\r\n            }\r\n            return post;\r\n        })\r\n        return newPosts;\r\n\r\n        case UPDATE_POST_LIKE:\r\n            const updatedPosts = state.map((post) =>{\r\n                if(post._id===action.postId){\r\n                    return {\r\n                        ...post,\r\n                        likes:[action.userId,...post.likes]\r\n                    }\r\n                }\r\n                return post;\r\n            })\r\n            return updatedPosts;\r\n\r\n    default:\r\n        return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport {configureStore} from './store'; // automatically means './store/index.js'\n\nconst store = configureStore();\n// console.log(store);\nconsole.log(store.getState());\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store} >  {/* WE HAVE TO PASS PROVIDER , SINCE CONNECT WILL GET STORE FROM THIS ONLY */} \n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n \n\n\n","import {createStore,applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport reducer from '../reducers'  // automaticlly find index.js file\r\n\r\nlet store;\r\n\r\nexport function configureStore(){\r\n    store=createStore(reducer,applyMiddleware(thunk,logger));\r\n    // store=createStore(combineReducers({posts,users}),applyMiddleware(thunk));\r\n    \r\n    return store;\r\n} \r\n"],"sourceRoot":""}